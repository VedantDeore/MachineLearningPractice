# -*- coding: utf-8 -*-
"""Numpy Tutorial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GhtQo8OoJp2fdZiXA3r8fXBNgfS61UGx
"""

import numpy as np

myarr = np.array([[3,6,32,7]], np.int8) # if we use int8, number should not be large
# int32, int64 instead of int8

myarr

myarr[0,1]

myarr.shape # give shape -> row and column

myarr.dtype # give data type

myarr[0,1] = 45

myarr

# Numpy Array creation methods
#1. Convert from list or tuple..
#2. Intrinsic numpy array creation objects ( arange , ones, zeros)
#3. Reading array from disk, either from standard or custom formats
#4. Creating array from raw bytes through the use of strings or buffers
#5. Use of special library functions (eg. random)

"""#1. Convert from list or tuple.."""

listarray = np.array([[1,2,3],[5,8,5],[0,3,1]])

listarray

listarray.dtype

listarray.shape

listarray.size

np.array({34,23,23}) # dtype = object is not that efficient, we use integer and float generally



"""#2. Intrinsic numpy array creation objects ( arange , ones, zeros)"""

zeros = np.zeros((2, 5)) # 2 rows and 5 columns

zeros

zeros.dtype

rng = np.arange(15) # creates numpy array in range, 0 to 14

rng

lspace = np.linspace(1,5,12) # gives 12 equally linearly space elements between range  1 to 5  *equal space in them

lspace

lspace = np.linspace(1,4,4)

lspace

lspace = np.linspace(1,50,10)

lspace

lspace = np.linspace(1,5,4)

lspace

emp = np.empty((4,6)) # gives empty array of 4 rows and 6 columns , all elements will be random, we can assign any value to it

emp

emp_like = np.empty_like(lspace) # gives empty array of same shape as lspace

emp_like # purana array lspace tha that array's size is copied in new array, these elements can be changed by us as we like

ide = np.identity(45) # gives identity matrix of 45 rows and 45 columns

ide

ide.shape

arr = np.arange(99)

arr

arr = arr.reshape(3,33) # we get reshaped into 3 x 33

arr

arr.shape

arr =arr.ravel() # gives 1D array

arr.shape









"""#3. Axis in Numpy"""

x = [[1,2,3],[4,5,6],[7,1,0]]

ar = np.array(x)

ar

ar.sum(axis =0)

ar.sum(axis =1)

ar

ar.T # Transpose of the array

ar.flat # gives iterator

for i in ar.flat:
    print(i)

ar.ndim # gives dimension

ar.size # gives size, number of elements in array

ar.nbytes # gives total bytes consumed by array

one = np.array([1,3,4,634,2])

"""# Methods in Numpy Array"""

one.argmax() # gives index of maximum element

one.argmin() # gives index of minimum element

one.argsort() # gives index of sorted elements , if the array was sorted, it would look like this

ar

ar.argmin() #

ar.argmax()

ar.argmax(axis=0) # | | |

ar.argmax(axis=1) # - - -

ar.argsort(axis=0)

ar

ar.argsort(axis=1)

ar.ravel()

ar.reshape((9,1))

ar.reshape((9,))

"""# Mathematical Operations in Numpy"""

ar2 = np.array([[1,2,1],[4,0,6],[8,1,0]])

ar + ar2

[324,34] + [34,546] # we cannot do marix operation in here

ar

ar2

ar * ar2

np.sqrt(ar)

ar.sum() # sum of all elements

ar.max()

ar.min()

ar

np.where(ar>5) # gives index of elements which are greater than 5, it returns tuple of arrays

type(np.where(ar>5))

np.count_nonzero(ar) # gives count of non zero elements

np.nonzero(ar) # gives index of non zero elements

# the above is 0,0 | 0,1 | 0,2

ar[1,2] =0

np.nonzero(ar)

# we get a tuple for each axis



"""# How numpy uses less space"""

import sys

py_ar = [0,4,55,2]

np_ar = np.array(py_ar)

sys.getsizeof(1) * len(py_ar) # size of 1 -> size of one element in the array

np_ar.itemsize * np_ar.size # itemsize -> one attribute (size of one item) X total items

np_ar.tolist()

